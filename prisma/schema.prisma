generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  Activity      Activity[]
  Authenticator Authenticator[]
  Profile       Profile[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Activity {
  id        BigInt   @id @default(autoincrement())
  startAt   DateTime @default(now()) @db.Timestamptz(6)
  type      String
  title     String
  userId    String
  content   String   @default("")
  mediaUrl  String   @default("")
  isDeleted Boolean  @default(false)
  endAt     DateTime @default(now()) @db.Timestamptz(6)
  User      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Profile {
  id                         BigInt  @id @default(autoincrement())
  userId                     String
  name                       String? @db.VarChar(20)
  brand                      String? @db.VarChar(255)
  phone                      String? @db.VarChar(20)
  email                      String? @db.VarChar(255)
  businessRegistrationNumber String? @db.VarChar(20)
  address                    String? @db.VarChar(255)
  bank                       String? @db.VarChar(20)
  accountNumber              String? @db.VarChar(20)
  depositor                  String? @db.VarChar(20)
  User                       User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
